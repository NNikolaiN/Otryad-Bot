from aiogram import Router, types, F, Bot
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from config import ADMINS
from utils.storage import get_buttons, update_button, add_message_to_button, toggle_button, get_users, save_data, remove_message_from_button, get_receipts, update_receipt_status
import html

router = Router()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
class AdminStates(StatesGroup):
    main_menu = State()
    choose_button = State()
    choose_action = State()
    new_name = State()
    add_message = State()
    add_caption = State()
    confirm_broadcast = State()
    preview_broadcast = State()  # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å—Å—ã–ª–∫–∏
    preview_message = State()    # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏
    delete_message = State()
    create_button = State()
    check_receipts = State()
    select_receipt = State()
    process_receipt = State()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è entities –≤ HTML
def entities_to_html(content: str, entities: list[types.MessageEntity] = None) -> str:
    if not content or not content.strip():
        return ""
    if not entities:
        return html.escape(content)

    print(f"Debug: Processing entities for text: {content}")  # –û—Ç–ª–∞–¥–∫–∞
    print(f"Debug: Entities: {entities}")

    # –°–æ–∑–¥–∞—ë–º —Å–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π (–æ—Ç–∫—Ä—ã—Ç–∏–µ/–∑–∞–∫—Ä—ã—Ç–∏–µ —Ç–µ–≥–æ–≤)
    events = []
    for entity in entities:
        if entity.type == "bold":
            tag_open, tag_close = "<b>", "</b>"
        elif entity.type == "italic":
            tag_open, tag_close = "<i>", "</i>"
        elif entity.type == "underline":
            tag_open, tag_close = "<u>", "</u>"
        elif entity.type == "strikethrough":
            tag_open, tag_close = "<s>", "</s>"
        elif entity.type == "spoiler":
            tag_open, tag_close = '<span class="tg-spoiler">', "</span>"
        elif entity.type == "text_link":
            tag_open, tag_close = f'<a href="{html.escape(entity.url)}">', "</a>"
        elif entity.type == "blockquote" or entity.type == "expandable_blockquote":
            tag_open, tag_close = "<blockquote>", "</blockquote>"
        else:
            continue
        events.append((entity.offset, "open", tag_open))
        events.append((entity.offset + entity.length, "close", tag_close))

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è –ø–æ –ø–æ–∑–∏—Ü–∏–∏ –∏ —Ç–∏–ø—É (–∑–∞–∫—Ä—ã–≤–∞—é—â–∏–µ —Ç–µ–≥–∏ –ø–µ—Ä–µ–¥ –æ—Ç–∫—Ä—ã–≤–∞—é—â–∏–º–∏ –ø—Ä–∏ —Ä–∞–≤–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏)
    events.sort(key=lambda x: (x[0], x[1] == "open"))

    result = []
    last_pos = 0
    for pos, event_type, tag in events:
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –¥–æ —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏
        if pos > last_pos:
            result.append(html.escape(content[last_pos:pos]))
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–≥
        result.append(tag)
        last_pos = pos

    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–π—Å—è —Ç–µ–∫—Å—Ç
    if last_pos < len(content):
        result.append(html.escape(content[last_pos:]))

    final_html = "".join(result)
    print(f"Debug: Generated HTML: {final_html}")  # –û—Ç–ª–∞–¥–∫–∞
    return final_html

def is_admin(user_id: int) -> bool:
    return user_id in ADMINS

@router.message(Command(commands=["admin", "Admin"]))
async def admin_panel(message: types.Message, state: FSMContext):
    print(f"‚ö° –ö–æ–º–∞–Ω–¥–∞ /admin –æ—Ç {message.from_user.id}, ADMINS: {ADMINS}")
    if not is_admin(message.from_user.id):
        print("üö´ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
    print("‚úÖ –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à—ë–Ω")
    await show_main_menu(message, state)

async def show_main_menu(message: types.Message, state: FSMContext):
    await state.set_state(AdminStates.main_menu)
    await message.answer(
        "üëë <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        parse_mode="HTML",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫")],
                [KeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –∫–Ω–æ–ø–∫—É")],
                [KeyboardButton(text="üì¨ –†–∞—Å—Å—ã–ª–∫–∞")],
                [KeyboardButton(text="üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ–∫–æ–≤")],
                [KeyboardButton(text="üö™ –í—ã–π—Ç–∏"), KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")]
            ],
            resize_keyboard=True
        )
    )

async def show_button_list(message: types.Message, state: FSMContext):
    buttons = list(get_buttons().keys())
    if not buttons:
        await state.clear()
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫.", reply_markup=ReplyKeyboardRemove())
        await show_main_menu(message, state)
        return
    
    keyboard = [[KeyboardButton(text=btn)] for btn in buttons]
    keyboard.append([KeyboardButton(text="üîô –ù–∞–∑–∞–¥"), KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")])
    markup = ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)
    
    await state.set_state(AdminStates.choose_button)
    await message.answer("–í—ã–±–µ—Ä–∏ –∫–Ω–æ–ø–∫—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", parse_mode="HTML", reply_markup=markup)

@router.message(Command("cancel"))
async def cancel_action(message: types.Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        return await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
    await cancel_button(message, state)

@router.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", StateFilter(*AdminStates))
async def cancel_button(message: types.Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        return await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
    
    current_state = await state.get_state()
    data = await state.get_data()
    receipt = data.get("receipt")
    
    if current_state in [AdminStates.select_receipt.state, AdminStates.process_receipt.state] and receipt:
        await message.answer(
            f"‚ùå –û—Ç–º–µ–Ω–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ–∫–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {receipt['user_id']} (–¢–∏–ø: {receipt['type']}).",
            reply_markup=ReplyKeyboardRemove()
        )
    else:
        await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())
    
    await state.clear()
    await show_main_menu(message, state)

@router.message(F.text == "üö™ –í—ã–π—Ç–∏", StateFilter(AdminStates.main_menu, AdminStates.choose_button, AdminStates.choose_action))
async def exit_admin_panel(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("–í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.", reply_markup=ReplyKeyboardRemove())

@router.message(AdminStates.main_menu)
async def handle_main_menu(message: types.Message, state: FSMContext):
    if message.text == "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫":
        await show_button_list(message, state)
    elif message.text == "‚ûï –°–æ–∑–¥–∞—Ç—å –∫–Ω–æ–ø–∫—É":
        await state.set_state(AdminStates.create_button)
        await message.answer(
            "–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–Ω–æ–ø–∫–∏:",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")]],
                resize_keyboard=True
            )
        )
    elif message.text == "üì¨ –†–∞—Å—Å—ã–ª–∫–∞":
        await state.set_state(AdminStates.confirm_broadcast)
        await message.answer(
            "–û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç, –≥–æ–ª–æ—Å, –∫—Ä—É–∂–æ–∫, —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.\n"
            "–°—Ç–∏–ª–∏–∑—É–π —Ç–µ–∫—Å—Ç –ø—Ä—è–º–æ –≤ Telegram (–∂–∏—Ä–Ω—ã–π, –∫—É—Ä—Å–∏–≤, —Å—Å—ã–ª–∫–∏ –∏ —Ç.–¥.).",
            parse_mode="HTML",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")]],
                resize_keyboard=True
            )
        )
    elif message.text == "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ–∫–æ–≤":
        await state.set_state(AdminStates.check_receipts)
        await show_receipts_list(message, state)
    elif message.text == "üö™ –í—ã–π—Ç–∏":
        await exit_admin_panel(message, state)
    elif message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        await cancel_button(message, state)
    else:
        await message.answer("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.", reply_markup=ReplyKeyboardRemove())
        await show_main_menu(message, state)

async def show_receipts_list(message: types.Message, state: FSMContext):
    receipts = get_receipts()
    pending_receipts = [r for r in receipts if r["status"] == "pending"]
    if not pending_receipts:
        await state.clear()
        await message.answer("–ù–µ—Ç —á–µ–∫–æ–≤ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.", reply_markup=ReplyKeyboardRemove())
        await show_main_menu(message, state)
        return
    
    text = "–ß–µ–∫–∏ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É:\n"
    for i, receipt in enumerate(pending_receipts):
        text += f"{i + 1}. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {receipt['user_id']} (–¢–∏–ø: {receipt['type']})\n"
    text += "\n–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä —á–µ–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1):"
    
    await state.update_data(receipts=pending_receipts)
    await state.set_state(AdminStates.select_receipt)
    await message.answer(
        text,
        parse_mode="HTML",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="üîô –ù–∞–∑–∞–¥"), KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")]],
            resize_keyboard=True
        )
    )

@router.message(AdminStates.select_receipt, F.text)
async def select_receipt(message: types.Message, state: FSMContext):
    if message.text == "üîô –ù–∞–∑–∞–¥":
        await state.set_state(AdminStates.check_receipts)
        await show_receipts_list(message, state)
        return
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        await cancel_button(message, state)
        return
    
    if not message.text.isdigit():
        return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–µ—á–∏—Å–ª–æ–≤–æ–π –≤–≤–æ–¥
    
    index = int(message.text) - 1
    data = await state.get_data()
    receipts = data.get("receipts", [])
    if 0 <= index < len(receipts):
        receipt = receipts[index]
        await state.update_data(receipt=receipt)
        print(f"–í—ã–±—Ä–∞–Ω —á–µ–∫: {receipt}")  # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
        await message.answer(
            f"–ß–µ–∫ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {receipt['user_id']} (–¢–∏–ø: {receipt['type']})."
        )
        if receipt["type"] == "photo":
            await message.bot.send_photo(message.chat.id, receipt["file_id"])
        elif receipt["type"] == "document":
            await message.bot.send_document(message.chat.id, receipt["file_id"])
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å")],
                    [KeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å")],
                    [KeyboardButton(text="üîô –ù–∞–∑–∞–¥"), KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")]
                ],
                resize_keyboard=True
            )
        )
        await state.set_state(AdminStates.process_receipt)
    else:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —á–µ–∫–∞. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="üîô –ù–∞–∑–∞–¥"), KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")]],
                resize_keyboard=True
            )
        )

@router.message(AdminStates.process_receipt, F.text.in_(["‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", "üîô –ù–∞–∑–∞–¥", "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å"]))
async def process_receipt_action(message: types.Message, state: FSMContext, bot: Bot):
    print(f"process_receipt_action —Å—Ä–∞–±–æ—Ç–∞–ª: {message.text}")  # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
    data = await state.get_data()
    receipt = data.get("receipt")
    if not receipt:
        print("–ß–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏")  # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞: —á–µ–∫ –Ω–µ –≤—ã–±—Ä–∞–Ω.",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="üîô –ù–∞–∑–∞–¥"), KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")]],
                resize_keyboard=True
            )
        )
        return

    if message.text == "üîô –ù–∞–∑–∞–¥":
        await state.set_state(AdminStates.check_receipts)
        await show_receipts_list(message, state)
        return
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        await cancel_button(message, state)
        return

    if message.text == "‚úÖ –û–¥–æ–±—Ä–∏—Ç—å":
        update_receipt_status(receipt["user_id"], receipt["file_id"], "approved")
        await message.answer(f"‚úÖ –ß–µ–∫ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {receipt['user_id']} –æ–¥–æ–±—Ä–µ–Ω.")
        try:
            await bot.send_message(receipt["user_id"], "–í–∞—à —á–µ–∫ –æ–¥–æ–±—Ä–µ–Ω! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –æ—Ç—Ä—è–¥ —Å–≤–æ–±–æ–¥—ã!")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {receipt['user_id']}: {e}")
    elif message.text == "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å":
        update_receipt_status(receipt["user_id"], receipt["file_id"], "rejected")
        await message.answer(f"‚ùå –ß–µ–∫ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {receipt['user_id']} –æ—Ç–∫–ª–æ–Ω—ë–Ω.")
        try:
            await bot.send_message(receipt["user_id"], "–í–∞—à —á–µ–∫ –æ—Ç–∫–ª–æ–Ω—ë–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {receipt['user_id']}: {e}")

    await state.set_state(AdminStates.check_receipts)
    await show_receipts_list(message, state)

@router.message(AdminStates.choose_button)
async def choose_action(message: types.Message, state: FSMContext):
    btn_name = message.text
    if btn_name == "üîô –ù–∞–∑–∞–¥":
        await show_main_menu(message, state)
        return
    if btn_name == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        await cancel_button(message, state)
        return
    if btn_name not in get_buttons():
        await state.clear()
        await message.answer("–¢–∞–∫–æ–π –∫–Ω–æ–ø–∫–∏ –Ω–µ—Ç.", reply_markup=ReplyKeyboardRemove())
        await show_button_list(message, state)
        return
    await state.update_data(button=btn_name)
    await state.set_state(AdminStates.choose_action)
    await message.answer(
        f"–í—ã–±—Ä–∞–Ω–∞ –∫–Ω–æ–ø–∫–∞: <b>{btn_name}</b>\n–ß—Ç–æ —Å–¥–µ–ª–∞—Ç—å?",
        parse_mode="HTML",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ"), KeyboardButton(text="üßæ –î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")],
                [KeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"), KeyboardButton(text="üö´ –û—Ç–∫–ª—é—á–∏—Ç—å –∫–Ω–æ–ø–∫—É")],
                [KeyboardButton(text="‚úÖ –í–∫–ª—é—á–∏—Ç—å –∫–Ω–æ–ø–∫—É"), KeyboardButton(text="üö™ –í—ã–π—Ç–∏")],
                [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")]
            ],
            resize_keyboard=True
        )
    )

@router.message(F.text == "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", AdminStates.choose_action)
async def start_rename(message: types.Message, state: FSMContext):
    await state.set_state(AdminStates.new_name)
    await message.answer(
        "–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∫–Ω–æ–ø–∫–∏:",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")]],
            resize_keyboard=True
        )
    )

@router.message(AdminStates.new_name)
async def finish_rename(message: types.Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        await cancel_button(message, state)
        return
    new_name = message.text
    if len(new_name) > 50 or not new_name.strip():
        return await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –∏–ª–∏ –ø—É—Å—Ç–æ–µ. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
    data = await state.get_data()
    old_name = data.get("button")
    buttons = get_buttons()
    if new_name in buttons:
        return await message.answer("‚ùå –ö–Ω–æ–ø–∫–∞ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
    buttons[new_name] = buttons.pop(old_name)
    save_data({"buttons": buttons, "users": get_users(), "receipts": get_receipts()})
    await state.clear()
    await message.answer(f"‚úÖ –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∞ –≤ <b>{new_name}</b>.", parse_mode="HTML", reply_markup=ReplyKeyboardRemove())
    await show_button_list(message, state)

@router.message(F.text == "üßæ –î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", AdminStates.choose_action)
async def start_add_message(message: types.Message, state: FSMContext):
    await state.set_state(AdminStates.add_message)
    await message.answer(
        "–û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç, –≥–æ–ª–æ—Å–æ–≤–æ–µ, –∫—Ä—É–∂–æ–∫, —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ –¥–ª—è –∫–Ω–æ–ø–∫–∏.\n"
        "–°—Ç–∏–ª–∏–∑—É–π —Ç–µ–∫—Å—Ç –ø—Ä—è–º–æ –≤ Telegram (–∂–∏—Ä–Ω—ã–π, –∫—É—Ä—Å–∏–≤, —Å—Å—ã–ª–∫–∏ –∏ —Ç.–¥.).",
        parse_mode="HTML",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")]],
            resize_keyboard=True
        )
    )

@router.message(AdminStates.create_button)
async def create_new_button(message: types.Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        await cancel_button(message, state)
        return
    new_name = message.text.strip()
    if len(new_name) > 50 or not new_name:
        return await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –∏–ª–∏ –ø—É—Å—Ç–æ–µ. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
    buttons = get_buttons()
    if new_name in buttons:
        return await message.answer("‚ùå –ö–Ω–æ–ø–∫–∞ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
    
    update_button(new_name, {"messages": [], "active": True})
    save_data({"buttons": get_buttons(), "users": get_users(), "receipts": get_receipts()})
    
    await state.update_data(button=new_name)
    await state.set_state(AdminStates.add_message)
    await message.answer(
        f"‚úÖ –ö–Ω–æ–ø–∫–∞ <b>{new_name}</b> —Å–æ–∑–¥–∞–Ω–∞.\n"
        "–û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç, –≥–æ–ª–æ—Å–æ–≤–æ–µ, –∫—Ä—É–∂–æ–∫, —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ –¥–ª—è –∫–Ω–æ–ø–∫–∏.\n"
        "–°—Ç–∏–ª–∏–∑—É–π —Ç–µ–∫—Å—Ç –ø—Ä—è–º–æ –≤ Telegram (–∂–∏—Ä–Ω—ã–π, –∫—É—Ä—Å–∏–≤, —Å—Å—ã–ª–∫–∏ –∏ —Ç.–¥.).",
        parse_mode="HTML",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")]],
            resize_keyboard=True
        )
    )

@router.message(AdminStates.add_message, F.voice)
async def add_voice(message: types.Message, state: FSMContext):
    await state.update_data(
        voice_file_id=message.voice.file_id,
        caption=message.caption,
        caption_entities=message.caption_entities
    )
    await show_message_preview(message, state, "voice")

@router.message(AdminStates.add_message, F.video_note)
async def add_video_note(message: types.Message, state: FSMContext):
    await state.update_data(
        video_note_file_id=message.video_note.file_id,
        caption=message.caption,
        caption_entities=message.caption_entities
    )
    await show_message_preview(message, state, "video_note")

@router.message(AdminStates.add_message, F.photo)
async def add_photo(message: types.Message, state: FSMContext):
    await state.update_data(
        photo_file_id=message.photo[-1].file_id,
        caption=message.caption,
        caption_entities=message.caption_entities
    )
    await show_message_preview(message, state, "photo")

@router.message(AdminStates.add_message, F.video)
async def add_video(message: types.Message, state: FSMContext):
    await state.update_data(
        video_file_id=message.video.file_id,
        caption=message.caption,
        caption_entities=message.caption_entities
    )
    await show_message_preview(message, state, "video")

async def show_message_preview(message: types.Message, state: FSMContext, msg_type: str):
    data = await state.get_data()
    caption = entities_to_html(data.get("caption", ""), data.get("caption_entities", [])) if data.get("caption") else ""
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
    try:
        if msg_type == "voice":
            await message.bot.send_voice(message.chat.id, data["voice_file_id"], caption=caption, parse_mode="HTML" if caption else None)
        elif msg_type == "video_note":
            await message.bot.send_video_note(message.chat.id, data["video_note_file_id"])
            if caption:
                await message.answer(caption, parse_mode="HTML")
        elif msg_type == "photo":
            await message.bot.send_photo(message.chat.id, data["photo_file_id"], caption=caption, parse_mode="HTML" if caption else None)
        elif msg_type == "video":
            await message.bot.send_video(message.chat.id, data["video_file_id"], caption=caption, parse_mode="HTML" if caption else None)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.", reply_markup=ReplyKeyboardRemove())
        await state.clear()
        await show_main_menu(message, state)
        return
    
    await state.set_state(AdminStates.preview_message)
    await message.answer(
        "–≠—Ç–æ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å?",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")],
                [KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ")],
                [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")]
            ],
            resize_keyboard=True
        )
    )

@router.message(AdminStates.preview_message, F.text)
async def handle_message_preview(message: types.Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        await cancel_button(message, state)
        return
    if message.text == "–î–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ":
        await state.set_state(AdminStates.add_caption)
        await message.answer(
            "–û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç –æ–ø–∏—Å–∞–Ω–∏—è, —Å—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –≤ Telegram (–∂–∏—Ä–Ω—ã–π, –∫—É—Ä—Å–∏–≤, —Å—Å—ã–ª–∫–∏ –∏ —Ç.–¥.).",
            parse_mode="HTML",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")]],
                resize_keyboard=True
            )
        )
        return
    if message.text == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å":
        data = await state.get_data()
        button_name = data["button"]
        
        if "voice_file_id" in data:
            file_id = data["voice_file_id"]
            msg_type = "voice"
        elif "video_note_file_id" in data:
            file_id = data["video_note_file_id"]
            msg_type = "video_note"
        elif "photo_file_id" in data:
            file_id = data["photo_file_id"]
            msg_type = "photo"
        elif "video_file_id" in data:
            file_id = data["video_file_id"]
            msg_type = "video"
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –º–µ–¥–∏–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())
            await state.clear()
            await show_button_list(message, state)
            return
        
        caption = entities_to_html(data.get("caption", ""), data.get("caption_entities", [])) if data.get("caption") else ""
        message_data = {
            "type": msg_type,
            "file_id": file_id
        }
        if caption:
            message_data["caption"] = caption
        
        add_message_to_button(button_name, message_data)
        await message.answer(f"‚úÖ {msg_type.capitalize()} –¥–æ–±–∞–≤–ª–µ–Ω–æ {'—Å –ø–æ–¥–ø–∏—Å—å—é' if caption else '–±–µ–∑ –ø–æ–¥–ø–∏—Å–∏'}.", reply_markup=ReplyKeyboardRemove())
        await state.clear()
        await show_button_list(message, state)

@router.message(AdminStates.add_caption, F.text)
async def add_media_caption(message: types.Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        await cancel_button(message, state)
        return
    data = await state.get_data()
    await state.update_data(caption=message.text, caption_entities=message.entities)
    await show_message_preview(message, state, data.get("voice_file_id") and "voice" or
                             data.get("video_note_file_id") and "video_note" or
                             data.get("photo_file_id") and "photo" or "video")

@router.message(AdminStates.add_message, F.text)
async def add_text(message: types.Message, state: FSMContext):
    content = entities_to_html(message.text, message.entities or [])
    await state.update_data(text_content=content)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
    try:
        await message.answer(content, parse_mode="HTML")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–µ–∫—Å—Ç–∞: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.", reply_markup=ReplyKeyboardRemove())
        await state.clear()
        await show_main_menu(message, state)
        return
    
    await state.set_state(AdminStates.preview_message)
    await message.answer(
        "–≠—Ç–æ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å?",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")],
                [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")]
            ],
            resize_keyboard=True
        )
    )

@router.message(AdminStates.preview_message, F.text == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", F.state == AdminStates.preview_message)
async def confirm_text_message(message: types.Message, state: FSMContext):
    data = await state.get_data()
    button_name = data["button"]
    content = data.get("text_content")
    
    if content:
        add_message_to_button(button_name, {"type": "text", "content": content})
        await message.answer("‚úÖ –¢–µ–∫—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω.", reply_markup=ReplyKeyboardRemove())
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: —Ç–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=ReplyKeyboardRemove())
    
    await state.clear()
    await show_button_list(message, state)

@router.message(AdminStates.add_message)
async def handle_invalid_message(message: types.Message, state: FSMContext):
    await message.answer(
        "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è. –û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç, –≥–æ–ª–æ—Å–æ–≤–æ–µ, –∫—Ä—É–∂–æ–∫, —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ.\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π /cancel –∏–ª–∏ –Ω–∞–∂–º–∏ ¬´‚ùå –û—Ç–º–µ–Ω–∏—Ç—å¬ª.",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")]],
            resize_keyboard=True
        )
    )

@router.message(F.text == "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", AdminStates.choose_action)
async def start_delete_message(message: types.Message, state: FSMContext):
    data = await state.get_data()
    button_name = data["button"]
    buttons = get_buttons()
    messages = buttons.get(button_name, {}).get("messages", [])
    
    if not messages:
        await state.clear()
        await message.answer(f"–£ –∫–Ω–æ–ø–∫–∏ <b>{button_name}</b> –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", parse_mode="HTML", reply_markup=ReplyKeyboardRemove())
        await show_button_list(message, state)
        return
    
    text = f"–°–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–Ω–æ–ø–∫–∏ <b>{button_name}</b>:\n"
    for i, msg in enumerate(messages):
        msg_type = msg.get("type")
        if msg_type == "text":
            content = msg.get("content", "–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞")
        elif msg_type in ["voice", "video_note", "photo", "video"]:
            content = f"{msg_type.capitalize()} (ID: {msg.get('file_id', 'N/A')})"
        else:
            content = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø"
        caption = msg.get("caption", "")
        if caption:
            content += f"\n–ü–æ–¥–ø–∏—Å—å: {caption}"
        text += f"{i + 1}. {content}\n"
    text += "\n–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1):"
    
    await state.set_state(AdminStates.delete_message)
    await message.answer(
        text,
        parse_mode="HTML",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")]],
            resize_keyboard=True
        )
    )

@router.message(AdminStates.delete_message)
async def finish_delete_message(message: types.Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        await cancel_button(message, state)
        return
    data = await state.get_data()
    button_name = data["button"]
    buttons = get_buttons()
    messages = buttons.get(button_name, {}).get("messages", [])
    
    try:
        index = int(message.text) - 1
        if 0 <= index < len(messages):
            remove_message_from_button(button_name, index)
            await message.answer(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –∏–∑ –∫–Ω–æ–ø–∫–∏ <b>{button_name}</b>.", parse_mode="HTML", reply_markup=ReplyKeyboardRemove())
        else:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.", reply_markup=ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")]],
                resize_keyboard=True
            ))
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏ —á–∏—Å–ª–æ.", reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")]],
            resize_keyboard=True
        ))
    
    if message.text.isdigit():
        await state.clear()
        await show_button_list(message, state)

@router.message(F.text == "‚úÖ –í–∫–ª—é—á–∏—Ç—å –∫–Ω–æ–ø–∫—É", AdminStates.choose_action)
async def enable_button(message: types.Message, state: FSMContext):
    data = await state.get_data()
    toggle_button(data["button"], True)
    await state.clear()
    await message.answer("–ö–Ω–æ–ø–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞.", reply_markup=ReplyKeyboardRemove())
    await show_button_list(message, state)

@router.message(F.text == "üö´ –û—Ç–∫–ª—é—á–∏—Ç—å –∫–Ω–æ–ø–∫—É", AdminStates.choose_action)
async def disable_button(message: types.Message, state: FSMContext):
    data = await state.get_data()
    toggle_button(data["button"], False)
    await state.clear()
    await message.answer("–ö–Ω–æ–ø–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞.", reply_markup=ReplyKeyboardRemove())
    await show_button_list(message, state)

@router.message(AdminStates.confirm_broadcast, F.text | F.voice | F.video_note | F.photo | F.video)
async def prepare_broadcast_preview(message: types.Message, state: FSMContext):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    data = {
        "text": message.text,
        "entities": message.entities,
        "caption": message.caption,
        "caption_entities": message.caption_entities
    }
    if message.voice:
        data["voice_file_id"] = message.voice.file_id
        data["type"] = "voice"
    elif message.video_note:
        data["video_note_file_id"] = message.video_note.file_id
        data["type"] = "video_note"
    elif message.photo:
        data["photo_file_id"] = message.photo[-1].file_id
        data["type"] = "photo"
    elif message.video:
        data["video_file_id"] = message.video.file_id
        data["type"] = "video"
    else:
        data["type"] = "text"
    
    await state.update_data(broadcast_data=data)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
    try:
        if data["type"] == "text":
            content = entities_to_html(data["text"], data["entities"] or [])
            await message.answer(content, parse_mode="HTML")
        elif data["type"] == "voice":
            caption = entities_to_html(data["caption"] or "", data["caption_entities"] or [])
            await message.bot.send_voice(message.chat.id, data["voice_file_id"], caption=caption, parse_mode="HTML" if caption else None)
        elif data["type"] == "video_note":
            await message.bot.send_video_note(message.chat.id, data["video_note_file_id"])
            if data["caption"]:
                caption = entities_to_html(data["caption"], data["caption_entities"] or [])
                await message.answer(caption, parse_mode="HTML")
        elif data["type"] == "photo":
            caption = entities_to_html(data["caption"] or "", data["caption_entities"] or [])
            await message.bot.send_photo(message.chat.id, data["photo_file_id"], caption=caption, parse_mode="HTML" if caption else None)
        elif data["type"] == "video":
            caption = entities_to_html(data["caption"] or "", data["caption_entities"] or [])
            await message.bot.send_video(message.chat.id, data["video_file_id"], caption=caption, parse_mode="HTML" if caption else None)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.", reply_markup=ReplyKeyboardRemove())
        await state.clear()
        await show_main_menu(message, state)
        return
    
    await state.set_state(AdminStates.preview_broadcast)
    await message.answer(
        "–≠—Ç–æ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å—Å—ã–ª–∫–∏. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É?",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")],
                [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")]
            ],
            resize_keyboard=True
        )
    )

@router.message(AdminStates.preview_broadcast, F.text == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")
async def do_broadcast(message: types.Message, state: FSMContext):
    data = await state.get_data()
    broadcast_data = data.get("broadcast_data", {})
    users = get_users()
    success = 0
    
    for user_id in users:
        try:
            if broadcast_data["type"] == "text":
                content = entities_to_html(broadcast_data["text"], broadcast_data["entities"] or [])
                await message.bot.send_message(
                    user_id,
                    content,
                    parse_mode="HTML"
                )
                success += 1
            elif broadcast_data["type"] == "voice":
                caption = entities_to_html(broadcast_data["caption"] or "", broadcast_data["caption_entities"] or [])
                await message.bot.send_voice(
                    user_id,
                    broadcast_data["voice_file_id"],
                    caption=caption,
                    parse_mode="HTML" if caption else None
                )
                success += 1
            elif broadcast_data["type"] == "video_note":
                await message.bot.send_video_note(user_id, broadcast_data["video_note_file_id"])
                if broadcast_data["caption"]:
                    caption = entities_to_html(broadcast_data["caption"], broadcast_data["caption_entities"] or [])
                    await message.bot.send_message(user_id, caption, parse_mode="HTML")
                success += 1
            elif broadcast_data["type"] == "photo":
                caption = entities_to_html(broadcast_data["caption"] or "", broadcast_data["caption_entities"] or [])
                await message.bot.send_photo(
                    user_id,
                    broadcast_data["photo_file_id"],
                    caption=caption,
                    parse_mode="HTML" if caption else None
                )
                success += 1
            elif broadcast_data["type"] == "video":
                caption = entities_to_html(broadcast_data["caption"] or "", broadcast_data["caption_entities"] or [])
                await message.bot.send_video(
                    user_id,
                    broadcast_data["video_file_id"],
                    caption=caption,
                    parse_mode="HTML" if caption else None
                )
                success += 1
        except Exception as e:
            print(f"Failed to send message to user {user_id}: {e}")
            continue
    
    await state.clear()
    await message.answer(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success} —Å–æ–æ–±—â–µ–Ω–∏–π.", reply_markup=ReplyKeyboardRemove())
    await show_main_menu(message, state)

@router.message(AdminStates.preview_broadcast, F.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")
async def cancel_broadcast(message: types.Message, state: FSMContext):
    await cancel_button(message, state)

print("‚úÖ admin.py –∑–∞–≥—Ä—É–∂–µ–Ω")